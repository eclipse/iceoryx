// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MempoolPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "MempoolPubSubTypes.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

namespace Mempool
{
    ChunkPubSubType::ChunkPubSubType()
    {
        setName("Mempool::Chunk");
        m_typeSize = static_cast<uint32_t>(Chunk::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
        m_isGetKeyDefined = false;
        // size_t keyLength = Chunk::getKeyMaxCdrSerializedSize()>16 ? Chunk::getKeyMaxCdrSerializedSize() : 16;
        size_t keyLength = 0;
        m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
        memset(m_keyBuffer, 0, 0);
    }

    ChunkPubSubType::~ChunkPubSubType()
    {
        if(m_keyBuffer!=nullptr)
            free(m_keyBuffer);
    }

    bool ChunkPubSubType::serialize(void *data, SerializedPayload_t *payload)
    {
        Chunk *p_type = static_cast<Chunk*>(data);
        eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size); // Object that manages the raw buffer.
        eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
        payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
        // Serialize encapsulation
        ser.serialize_encapsulation();

        try
        {
            // Serialize array as a sequence, i.e. a size and the sequence.
            ser << p_type->size;
            ser.serializeArray(p_type->payload, p_type->size);
        }
        catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
        {
            std::cout << "Not enough memory" << std::endl;
            return false;
        }

        payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
        return true;
    }

    bool ChunkPubSubType::deserialize(SerializedPayload_t* payload, void* data)
    {
        Chunk* p_type = static_cast<Chunk*>(data); //Convert DATA to pointer of your type
        eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length); // Object that manages the raw buffer.
        eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
        // Deserialize encapsulation.
        deser.read_encapsulation();
        payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

        try
        {
            deser >> p_type->size;
            if (nullptr != p_type->payload)
            {
                deser.deserializeArray(p_type->payload, p_type->size);
            }
        }
        catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
        {
            return false;
        }

        return true;
    }

    std::function<uint32_t()> ChunkPubSubType::getSerializedSizeProvider(void* data)
    {
        return [data]() -> uint32_t
        {
            return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<Chunk*>(data))) + 4 /*encapsulation*/;
        };
    }

    void* ChunkPubSubType::createData()
    {
        return reinterpret_cast<void*>(new Chunk());
    }

    void ChunkPubSubType::deleteData(void* data)
    {
        delete(reinterpret_cast<Chunk*>(data));
    }

    bool ChunkPubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5)
    {
        (void)data;
        (void)handle;
        (void)force_md5;
        return true;
    }


} //End of namespace Mempool
